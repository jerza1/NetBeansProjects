/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package graficas;

import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.DomainOrder;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author jerza
 */
public class nuevoInicio extends javax.swing.JFrame {

    /**
     * Creates new form nuevoInicio
     */
    public nuevoInicio() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    String carrera;
    String semestre;
    String año;
    String periodo;
    String instituto;
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pestaña1 = new javax.swing.JTabbedPane();
        pInicio = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        listAsig = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        listInst = new javax.swing.JComboBox();
        listSms = new javax.swing.JComboBox();
        graf1 = new javax.swing.JButton();
        listAño = new javax.swing.JComboBox();
        listCarr = new javax.swing.JComboBox();
        listCant = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        graf2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        listP = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        desv = new javax.swing.JButton();
        pCantidad = new javax.swing.JPanel();
        pAsignacion = new javax.swing.JPanel();
        pDesviacion = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Cantidad de:");

        listAsig.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Profesores", "Institutos" }));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("Semestre");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("Asignaciones de:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Carreras");

        listInst.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Centro de Idiomas", "División de Estudios de Posgrado", "Instituto de Agroindustrias", "Instituto de Ciencias Sociales y Humanidades", "Instituto de Computación", "Instituto de Diseño", "Instituto de Electrónica y Mecatrónica", "Instituto de Física y Matemáticas", "Instituto de Hidrología", "Instituto de Minería", "Jefatura de Ingeniería Industrial" }));

        listSms.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        graf1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        graf1.setText("Graficar");
        graf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graf1ActionPerformed(evt);
            }
        });

        listAño.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2106" }));

        listCarr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Doctorado en Electrónica y Computación", "Doctorado en Electrónica, opción: Sistemas Inteligentes Aplicados", "Doctorado en Modelación Matemática", "Doctorado en Robótica", "Doctorado en Tecnologías de Cómputo Aplicado", "Ingeniería en Alimentos", "Ingeniería en Computación", "Ingeniería en Diseño", "Ingeniería en Electrónica", "Ingeniería en Física Aplicada", "Ingeniería en Mecatrónica", "Ingeniería Industrial", "Licenciatura en Ciencias Empresariales", "Licenciatura en Estudios Mexicanos (virtual)", "Licenciatura en Matemáticas Aplicadas", "Maestría en Administración de Negocios", "Maestría en Ciencias de Materiales", "Maestría en Ciencias: Productos Naturales y Alimentos", "Maestría en Diseño de Modas", "Maestría en Diseño de Muebles", "Maestría en Electrónica y Computación", "Maestría en Electrónica, opción: Sistemas Inteligentes Aplicados", "Maestría en Ingeniería de Software", "Maestría en Medios Interactivos", "Maestría en Modelación Matemática", "Maestría en Robótica", "Maestría en Sistemas Distribuidos (virtual)", "Maestría en Tecnología Avanzada de Manufactura", "Maestría en Tecnologías de Cómputo Aplicado" }));

        listCant.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Alumnos", "Grupos" }));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Graficas de Horarios");

        graf2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        graf2.setText("Graficar");
        graf2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graf2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("Instituto");

        listP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "P" }));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Año");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Periodo");

        desv.setText("Desviacion Estandar");
        desv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pInicioLayout = new javax.swing.GroupLayout(pInicio);
        pInicio.setLayout(pInicioLayout);
        pInicioLayout.setHorizontalGroup(
            pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pInicioLayout.createSequentialGroup()
                .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(listAsig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(56, 56, 56)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(listInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 84, Short.MAX_VALUE)
                        .addComponent(desv)
                        .addGap(126, 126, 126))
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pInicioLayout.createSequentialGroup()
                                .addGap(251, 251, 251)
                                .addComponent(jLabel1))
                            .addGroup(pInicioLayout.createSequentialGroup()
                                .addGap(310, 310, 310)
                                .addComponent(graf2))
                            .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pInicioLayout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel2)
                                    .addGap(132, 132, 132)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4))
                                .addGroup(pInicioLayout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(listCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(listCarr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(listSms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 226, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pInicioLayout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(graf1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addComponent(listAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(listP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel6)))
                .addGap(43, 43, 43))
        );
        pInicioLayout.setVerticalGroup(
            pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pInicioLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(graf1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listAsig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desv))
                        .addGap(38, 38, 38)
                        .addComponent(graf2)
                        .addGap(74, 74, 74))
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pInicioLayout.createSequentialGroup()
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pInicioLayout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pInicioLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listCarr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listSms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pestaña1.addTab("Inicio", pInicio);

        javax.swing.GroupLayout pCantidadLayout = new javax.swing.GroupLayout(pCantidad);
        pCantidad.setLayout(pCantidadLayout);
        pCantidadLayout.setHorizontalGroup(
            pCantidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 775, Short.MAX_VALUE)
        );
        pCantidadLayout.setVerticalGroup(
            pCantidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        pestaña1.addTab("Cantidad", pCantidad);

        javax.swing.GroupLayout pAsignacionLayout = new javax.swing.GroupLayout(pAsignacion);
        pAsignacion.setLayout(pAsignacionLayout);
        pAsignacionLayout.setHorizontalGroup(
            pAsignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 775, Short.MAX_VALUE)
        );
        pAsignacionLayout.setVerticalGroup(
            pAsignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        pestaña1.addTab("Asignaciones", pAsignacion);

        javax.swing.GroupLayout pDesviacionLayout = new javax.swing.GroupLayout(pDesviacion);
        pDesviacion.setLayout(pDesviacionLayout);
        pDesviacionLayout.setHorizontalGroup(
            pDesviacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 775, Short.MAX_VALUE)
        );
        pDesviacionLayout.setVerticalGroup(
            pDesviacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        pestaña1.addTab("Desviación Estandar", pDesviacion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pestaña1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pestaña1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graf1ActionPerformed
        carrera = (String) listCarr.getSelectedItem();  /*Convertir los objetos seleccionados de las listas*/
        semestre = (String) listSms.getSelectedItem();  /*en datos tipos String para ser enviados*/
        año = (String) listAño.getSelectedItem();       /*a la ventana grafica donde se mostrara la grafica de*/
        periodo = (String) listP.getSelectedItem();     /*cada uno*/
        

        if(listCant.getSelectedItem() == "Alumnos"){ //Graficar Total de Alumnos
            if(listCarr.getSelectedItem() == "Todas" && listSms.getSelectedItem() == "Todos"){//Total de alumnos (Todos)
                graficarAlumnos(1,carrera,semestre,año,periodo);
            }
            else if(listCarr.getSelectedItem() != "Todas" && listSms.getSelectedItem() == "Todos" ){//Total de alumnos por carreras
                graficarAlumnos(2,carrera,semestre,año,periodo);
            }
            else if(listSms.getSelectedItem() != "Todos" && listCarr.getSelectedItem() == "Todas"){//Total de alumnos por semestre
                graficarAlumnos(3,carrera,semestre,año,periodo);
            }
            else{//Total de alumnos por carrera y semestre
                graficarAlumnos(4,carrera,semestre,año,periodo);
            }
        }
        else {//Graficar Total de grupos

            if(listCarr.getSelectedItem() == "Todas" && listSms.getSelectedItem() == "Todos"){//Total de grupos(Todos)
                graficarAlumnos(5,carrera,semestre,año,periodo);
            }
            else if(listCarr.getSelectedItem() != "Todas"){//Total de grupos por carreras
                graficarAlumnos(6,carrera,semestre,año,periodo);
            }
            else if(listSms.getSelectedItem() != "Todos"){//Total de grupos por semestre
                graficarAlumnos(7,carrera,semestre,año,periodo);
            }
            else{//Total de grupos por carrera y semestre
                graficarAlumnos(8,carrera,semestre,año,periodo);
            }
        }
    }//GEN-LAST:event_graf1ActionPerformed

    private void graf2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graf2ActionPerformed
       instituto = (String) listInst.getSelectedItem();
       año = (String) listAño.getSelectedItem();
         periodo = (String) listP.getSelectedItem();
        if(listAsig.getSelectedItem() == "Profesores"){ //Graficar asignaciones de Profesores

            if(listInst.getSelectedItem() == "Todos" ){//Total de asignaciones (Todos)
                graficaAsig(1, instituto, año,periodo);
            }else{//Total de asignaciones de profesores por INSTITUTO
                graficaAsig(2, instituto, año, periodo);
            }
        }
        else {//Graficar Asignaciones de Institutos

            if(listInst.getSelectedItem() == "Todos"){//Total de asignaciones(Todos)
                graficaAsig(3, instituto, año, periodo);
            }else{//Total de asignaciones de institutos por institutos
                graficaAsig(4, instituto,año, periodo);
            }
       }
    }//GEN-LAST:event_graf2ActionPerformed

    private void desvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desvActionPerformed
        año = (String) listAño.getSelectedItem();
         periodo = (String) listP.getSelectedItem();
        clases.conexion bd = new clases.conexion();
        ChartPanel panel;
        JFreeChart chart = null;
        XYSeriesCollection dataset = new XYSeriesCollection();
        
        XYSeries data = new XYSeries("Asignaciones");
        XYSeries desv = new XYSeries("Desviación Estandar");
        XYSeries min = new XYSeries("Asignación mínima");
        XYSeries max = new XYSeries("Asignación maxima");
        XYSeries avg = new XYSeries("Promedio");
        
        try{
            bd.conectarBaseDeDatos();
                
                bd.resultado = bd.sentencia.executeQuery("SELECT profesor.id, count(asignacion.id) AS Total FROM profesor LEFT JOIN asignacion ON profesor.id = profesor_id AND "
                        +"anio = "+ año +" AND periodo = '"+ periodo +"' GROUP BY profesor.id, periodo ORDER BY nombres");
            if(bd.resultado != null){
                while(bd.resultado.next()){
            data.add(Integer.parseInt(bd.resultado.getString("profesor.id")), Integer.parseInt(bd.resultado.getString("Total")));
                }
             }
              dataset.addSeries(data);
            
              bd.resultado = bd.sentencia.executeQuery("SELECT profesor.id,std(total) as total FROM asig, profesor WHERE "
                                    +"anio = "+ año +" AND periodo = '"+ periodo +"' GROUP BY profesor.id, periodo ORDER BY nombres");
              if(bd.resultado != null){
                while(bd.resultado.next()){
            desv.add(Integer.parseInt(bd.resultado.getString("profesor.id")), Float.parseFloat(bd.resultado.getString("total")));
                    
                }
             }
              dataset.addSeries(desv);
             
            bd.resultado = bd.sentencia.executeQuery("SELECT profesor.id,min(total) as total FROM asig, profesor WHERE "
                    +"anio = "+ año +" AND periodo = '"+ periodo +"' GROUP BY profesor.id, periodo ORDER BY nombres");
              if(bd.resultado != null){
                while(bd.resultado.next()){
            min.add(Integer.parseInt(bd.resultado.getString("profesor.id")), Float.parseFloat(bd.resultado.getString("total")));
                    
                }
             }
              dataset.addSeries(min);
             
              bd.resultado = bd.sentencia.executeQuery("SELECT profesor.id,max(total) as total FROM asig, profesor WHERE "
                      +"anio = "+ año +" AND periodo = '"+ periodo +"' GROUP BY profesor.id, periodo ORDER BY nombres");
              if(bd.resultado != null){
                while(bd.resultado.next()){
            max.add(Integer.parseInt(bd.resultado.getString("profesor.id")), Float.parseFloat(bd.resultado.getString("total")));
                    
                }
             }
              dataset.addSeries(max);
              
              bd.resultado = bd.sentencia.executeQuery("SELECT profesor.id,avg(total) as total FROM asig, profesor WHERE "
                      +"anio = "+ año +" AND periodo = '"+ periodo +"' GROUP BY profesor.id, periodo ORDER BY nombres");
              if(bd.resultado != null){
                while(bd.resultado.next()){
            avg.add(Integer.parseInt(bd.resultado.getString("profesor.id")), Float.parseFloat(bd.resultado.getString("total")));
                    
                }
             }
              dataset.addSeries(avg);
            chart = ChartFactory.createXYLineChart("Desviación Estandar", "ID (profesores)", "Total", dataset, PlotOrientation.VERTICAL, true, true, true);
            
            panel = new ChartPanel(chart);
          
            panel.setBounds(5, 10, 760, 430);
            pDesviacion.removeAll();
            pDesviacion.add(panel);
            pestaña1.setSelectedIndex(3);
            pDesviacion.repaint();
          bd.commit();
       }   catch(Exception e) { JOptionPane.showMessageDialog(null,e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);}
        
    }//GEN-LAST:event_desvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nuevoInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nuevoInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nuevoInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nuevoInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nuevoInicio().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton desv;
    public static javax.swing.JButton graf1;
    public static javax.swing.JButton graf2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    public static javax.swing.JComboBox listAsig;
    public static javax.swing.JComboBox listAño;
    public static javax.swing.JComboBox listCant;
    public static javax.swing.JComboBox listCarr;
    public static javax.swing.JComboBox listInst;
    public static javax.swing.JComboBox listP;
    public static javax.swing.JComboBox listSms;
    public static javax.swing.JPanel pAsignacion;
    public static javax.swing.JPanel pCantidad;
    public static javax.swing.JPanel pDesviacion;
    public static javax.swing.JPanel pInicio;
    public static javax.swing.JTabbedPane pestaña1;
    // End of variables declaration//GEN-END:variables
public static void graficarAlumnos(int op,String carrera, String semestre, String año, String periodo){
 clases.conexion bd = new clases.conexion();
        ChartPanel panel;
        JFreeChart chart = null;
        try{
            bd.conectarBaseDeDatos();
            switch(op){
             case 1:
                    bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(sum(alumnos),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                                +año+" AND periodo ='"+periodo+"' GROUP BY nombre");
                    break;
             case 2:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(sum(alumnos),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                        +año+" AND periodo = '"+periodo+"' AND nombre = '"+carrera+"' GROUP BY nombre");
                 break;
             case 3:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(sum(alumnos),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                        +año+" AND periodo = '"+periodo+"'AND semestre = "+semestre+" GROUP BY nombre");
                 break;
             case 4:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(sum(alumnos),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                        +año+" AND periodo = '"+periodo+"' AND nombre = '"+carrera+"' AND semestre = "+semestre+" GROUP BY nombre");
                 break;
             case 5:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(count(codigo),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                          +año+" AND periodo = '"+periodo+"' GROUP BY nombre");
                 break;
             case 6:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(count(codigo),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                          +año+" AND periodo = '"+periodo+"' AND nombre = '"+carrera+"' GROUP BY nombre");
                 break;
             case 7:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(count(codigo),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                          +año+" AND periodo = '"+periodo+"'AND semestre = "+semestre+" GROUP BY nombre");
                 break;
             case 8:
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, IFNULL(count(codigo),0) AS total FROM carrera LEFT JOIN grupo ON carrera.id = carrera_id AND anio = "
                                                          +año+" AND periodo = '"+periodo+"' AND nombre = '"+carrera+"' AND semestre = "+semestre+" GROUP BY nombre");
                 break;
             default:
                 break;
            }
            DefaultCategoryDataset data = new DefaultCategoryDataset();
            if(bd.resultado != null){
                while(bd.resultado.next()){
                    if(op >= 1 || op <= 4){
                        data.setValue(Integer.parseInt(bd.resultado.getString("total")), "Alumnos", bd.resultado.getString("nombre"));
                    } else{
                        data.setValue(Integer.parseInt(bd.resultado.getString("total")), "Grupos", bd.resultado.getString("nombre"));
                    }
                }
             }
            if(op <= 4){
              chart = ChartFactory.createBarChart("Grafico de Barras", "Carreras",
                    "Alumnos", data, PlotOrientation.HORIZONTAL, true, true, true);
            }else{
                chart = ChartFactory.createBarChart("Grafico de Barras", "Carreras",
                    "Grupos", data, PlotOrientation.HORIZONTAL, true, true, true);
            }
              
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
            plot.setDomainGridlinesVisible(true);
             panel = new ChartPanel(chart);
          
        panel.setBounds(5, 10, 900, 450);
           pCantidad.removeAll();
            pCantidad.add(panel);
            pestaña1.setSelectedIndex(1);
            pCantidad.repaint();
          bd.commit();
       }   catch(Exception e) { JOptionPane.showMessageDialog(null,e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);}
        
        
}

public static void graficaAsig(int op, String inst, String año, String periodo) {
    clases.conexion bd = new clases.conexion();
        ChartPanel panel;
        JFreeChart chart = null;
        try{
            bd.conectarBaseDeDatos();
            switch(op){
             case 1:
                    System.out.print("1");
                    bd.resultado = bd.sentencia.executeQuery("SELECT nombres, apellidos, count(asignacion.id) as total FROM profesor LEFT JOIN asignacion ON profesor.id = profesor_id "
                                                        +"AND anio = "+año+" AND periodo = '"+periodo+"' GROUP BY profesor.id, periodo ORDER BY nombres");
                    break;
             case 2:
                 System.out.print("2");
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombres, apellidos, count(asignacion.id) as total FROM profesor LEFT JOIN asignacion "
                                                            +"ON profesor.id = profesor_id JOIN instituto ON instituto_id = instituto.id AND anio = "+año+" AND periodo = '"+periodo+"' AND nombre = '"+inst+"' GROUP BY profesor.id, periodo ORDER BY nombres");
                 break;
             case 3:
                 System.out.print("3");
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, count(profesor.id) as total FROM instituto LEFT JOIN profesor ON instituto.id = instituto_id"
                                                        +" JOIN asignacion ON profesor.id = profesor_id AND anio = "+año+" AND periodo = '"+periodo+"' GROUP BY instituto.id, periodo");
                 break;
             case 4:
                 System.out.print("4");
                 bd.resultado = bd.sentencia.executeQuery("SELECT nombre, count(profesor.id) as total FROM instituto LEFT JOIN profesor ON instituto.id = instituto_id "
                                                            +"JOIN asignacion ON profesror.id = profesor_id AND anio = "+año+" AND periodo = '"+periodo+"' AND nombre = '"+inst+"' GROUP BY instituto.id, periodo");
                 break;
             default: 
                 break;
            }
            DefaultCategoryDataset data = new DefaultCategoryDataset();
            if(bd.resultado != null){
                while(bd.resultado.next()){
                    if(op <= 2){
                    data.setValue(Integer.parseInt(bd.resultado.getString("total")), "Profesores", bd.resultado.getString("nombres"));
                    }else{
                        data.setValue(Integer.parseInt(bd.resultado.getString("total")), "Profesores", bd.resultado.getString("nombre"));
                    }
                }
             }
           
              chart = ChartFactory.createBarChart("Grafico de Barras", "Institutos",
                    "Profesores", data, PlotOrientation.HORIZONTAL, true, true, true);
           
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
            plot.setDomainGridlinesVisible(true);
             panel = new ChartPanel(chart);
          
        panel.setBounds(5, 10, 900, 550);
           pAsignacion.removeAll();
            pAsignacion.add(panel);
            pestaña1.setSelectedIndex(2);
            pAsignacion.repaint();
          bd.commit();
       }   catch(Exception e) { JOptionPane.showMessageDialog(null,e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);}
        
        
    }
}
